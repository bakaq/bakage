% === Generated code start ===
script_string("ensure_dependencies", "#!/bin/sh\nset -u\n\n# Fail instead of prompting for password in git commands.\nexport GIT_TERMINAL_PROMPT=0\n\nwrite_result() {\n    flock scryer_libs/temp/install_resp.pl.lock -c \\\n        \"printf \'result(\\\"%s\\\", %s).\\n\' \\\"$1\\\" \\\"$2\\\" >> scryer_libs/temp/install_resp.pl\"\n}\n\nwrite_success() {\n    write_result \"$1\" \"success\"\n}\n\nwrite_error() {\n    escaped_error=$(printf \'%s\' \"$2\" | sed -e \'s/\\\\/\\\\\\\\/g\' -e \'s/\"/\\\\\"/g\')\n    escaped_error=$(printf \'%s\' \"$escaped_error\" | tr \'\\r\\n\' \'\\\\n\')\n    escaped_error=$(printf \'%s\' \"$escaped_error\" | sed \'s/\xa0\/ /g\')\n    write_result \"$1\" \"error(\\\\\\\"$escaped_error\\\\\\\")\"\n}\n\ninstall_git_default() {\n    dependency_name=$1\n    git_url=$2\n\n    error_output=$(\n        git clone \\\n            --quiet \\\n            --depth 1 \\\n            --single-branch \\\n            \"${git_url}\" \\\n            \"scryer_libs/packages/${dependency_name}\" 2>&1 1>/dev/null\n    )\n\n    if [ -z \"$error_output\" ]; then\n        write_success \"${dependency_name}\"\n    else\n        write_error \"${dependency_name}\" \"$error_output\"\n    fi\n}\n\ninstall_git_branch() {\n    dependency_name=$1\n    git_url=$2\n    git_branch=$3\n\n    error_output=$(\n        git clone \\\n            --quiet \\\n            --depth 1 \\\n            --single-branch \\\n            --branch \"${git_branch}\" \\\n            \"${git_url}\" \\\n            \"scryer_libs/packages/${dependency_name}\" 2>&1 1>/dev/null\n    )\n\n    if [ -z \"$error_output\" ]; then\n        write_success \"${dependency_name}\"\n    else\n        write_error \"${dependency_name}\" \"$error_output\"\n    fi\n}\n\ninstall_git_tag() {\n    dependency_name=$1\n    git_url=$2\n    git_tag=$3\n\n    error_output=$(\n        git clone \\\n            --quiet \\\n            --depth 1 \\\n            --single-branch \\\n            --branch \"${git_tag}\" \\\n            \"${git_url}\" \\\n            \"scryer_libs/packages/${dependency_name}\" 2>&1 1>/dev/null\n    )\n\n    if [ -z \"$error_output\" ]; then\n        write_success \"${dependency_name}\"\n    else\n        write_error \"${dependency_name}\" \"$error_output\"\n    fi\n}\n\ninstall_git_hash() {\n    dependency_name=$1\n    git_url=$2\n    git_hash=$3\n\n    error_output=$(\n        git clone \\\n            --quiet \\\n            --depth 1 \\\n            --single-branch \\\n            \"${git_url}\" \\\n            \"scryer_libs/packages/${dependency_name}\" 2>&1 1>/dev/null\n    )\n\n    if [ -z \"$error_output\" ]; then\n        fetch_error=$(\n            git -C \"scryer_libs/packages/${dependency_name}\" fetch \\\n                --quiet \\\n                --depth 1 \\\n                origin \"${git_hash}\" 2>&1 1>/dev/null\n        )\n        switch_error=$(\n            git -C \"scryer_libs/packages/${dependency_name}\" switch \\\n                --quiet \\\n                --detach \\\n                \"${git_hash}\" 2>&1 1>/dev/null\n        )\n        combined_error=\"${fetch_error}; ${switch_error}\"\n\n        if [ -z \"$fetch_error\" ] && [ -z \"$switch_error\" ]; then\n            write_success \"${dependency_name}\"\n        else\n            write_error \"${dependency_name}\" \"$combined_error\"\n        fi\n    else\n        write_error \"${dependency_name}\" \"$error_output\"\n    fi\n}\n\ninstall_path() {\n    dependency_name=$1\n    dependency_path=$2\n\n    if [ -d \"${dependency_path}\" ]; then\n        error_output=$(ln -rsf \"${dependency_path}\" \"scryer_libs/packages/${dependency_name}\" 2>&1 1>/dev/null)\n\n        if [ -z \"$error_output\" ]; then\n            write_success \"${dependency_name}\"\n        else\n            write_error \"${dependency_name}\" \"$error_output\"\n        fi\n    else\n        write_error \"${dependency_name}\" \"${dependency_path} does not exist\"\n    fi\n}\n\nOLD_IFS=$IFS\nIFS=\'|\'\nset -- $DEPENDENCIES_STRING\nIFS=$OLD_IFS\n\ntouch scryer_libs/temp/install_resp.pl\n\nfor dependency in \"$@\"; do\n    unset dependency_term dependency_kind dependency_name git_url git_branch git_tag git_hash dependency_path\n\n    IFS=\';\'\n    set -- $dependency\n    IFS=$OLD_IFS\n\n    while [ \"$#\" -gt 0 ]; do\n        field=$1\n        shift\n\n        key=$(printf \"%s\" \"$field\" | cut -d= -f1)\n        value=$(printf \"%s\" \"$field\" | cut -d= -f2-)\n\n        case \"$key\" in\n        dependency_term) dependency_term=$value ;;\n        dependency_kind) dependency_kind=$value ;;\n        dependency_name) dependency_name=$value ;;\n        git_url) git_url=$value ;;\n        git_branch) git_branch=$value ;;\n        git_tag) git_tag=$value ;;\n        git_hash) git_hash=$value ;;\n        dependency_path) dependency_path=$value ;;\n        esac\n    done\n\n    printf \"Ensuring is installed: %s\\n\" \"${dependency_term}\"\n\n    case \"${dependency_kind}\" in\n    do_nothing) ;;\n\n    git_default)\n        install_git_default \"${dependency_name}\" \"${git_url}\" &\n        ;;\n    git_branch)\n        install_git_branch \"${dependency_name}\" \"${git_url}\" \"${git_branch}\" &\n        ;;\n    git_tag)\n        install_git_tag \"${dependency_name}\" \"${git_url}\" \"${git_tag}\" &\n        ;;\n    git_hash)\n        install_git_hash \"${dependency_name}\" \"${git_url}\" \"${git_hash}\" &\n        ;;\n    path)\n        install_path \"${dependency_name}\" \"${dependency_path}\" &\n        ;;\n    *)\n        printf \"Unknown dependency kind: %s\\n\" \"${dependency_kind}\"\n        write_error \"${dependency_name}\" \"Unknown dependency kind: ${dependency_kind}\"\n        ;;\n    esac\ndone\n\nwait\n\nrm -f scryer_libs/temp/install_resp.pl.lock\n").
% === Generated code end ===
